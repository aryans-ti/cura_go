import React, { useState } from 'react';
import {
  AlertCircle,
  AlertTriangle,
  ArrowRight,
  CheckCircle2,
  ChevronDown,
  Download,
  FileText,
  Loader2,
  Pill,
  Printer,
  Stethoscope
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { analyzeSymptomWithAI } from '../services/chatService';
import { motion } from 'framer-motion';

interface MedicalReportGeneratorProps {
  onComplete?: (data: any) => void;
  className?: string;
}

type ReportStatus = 'idle' | 'analyzing' | 'complete' | 'error';
type UrgencyLevel = 'non-urgent' | 'moderate' | 'urgent';

interface ReportData {
  symptoms: string[];
  possibleConditions: string[];
  urgencyLevel: UrgencyLevel;
  additionalSymptomsToWatch: string[];
  recommendedSpecialties: string[];
  generalAdvice?: string;
  createdAt: Date;
  reportId: string;
  emergencyDetected: boolean;
  emergencyRecommendation?: string;
  treatmentSuggestions: string[];
  preventionTips: string[];
}

const MedicalReportGenerator: React.FC<MedicalReportGeneratorProps> = ({ onComplete, className }) => {
  const [inputSymptoms, setInputSymptoms] = useState<string>('');
  const [status, setStatus] = useState<ReportStatus>('idle');
  const [error, setError] = useState<string | null>(null);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    symptoms: true,
    conditions: true,
    specialists: true,
    urgency: true,
    watchFor: true,
    treatment: true,
    prevention: true
  });

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleAnalyze = async () => {
    if (!inputSymptoms.trim() || status === 'analyzing') return;

    const symptoms = inputSymptoms
      .split(',')
      .map(s => s.trim())
      .filter(s => s.length > 0);

    if (symptoms.length === 0) {
      setError('Please enter at least one symptom');
      return;
    }

    setStatus('analyzing');
    setError(null);

    try {
      const analysis = await analyzeSymptomWithAI(symptoms);
      
      // Create a unique report ID
      const reportId = `MR-${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 5)}`.toUpperCase();
      
      // Build report data from AI analysis
      const newReportData: ReportData = {
        symptoms,
        possibleConditions: analysis.aiAnalysis?.possibleConditions || [],
        urgencyLevel: (analysis.aiAnalysis?.urgencyLevel as UrgencyLevel) || 'non-urgent',
        additionalSymptomsToWatch: analysis.aiAnalysis?.additionalSymptomsToWatch || [],
        recommendedSpecialties: analysis.aiAnalysis?.recommendedSpecialties || analysis.relevantSpecialties,
        createdAt: new Date(),
        reportId,
        emergencyDetected: analysis.aiAnalysis?.emergencyDetection || false,
        emergencyRecommendation: analysis.aiAnalysis?.emergencyRecommendation,
        treatmentSuggestions: analysis.aiAnalysis?.treatmentSuggestions || [],
        preventionTips: analysis.aiAnalysis?.preventionTips || []
      };

      setReportData(newReportData);
      setStatus('complete');
      
      if (onComplete) {
        onComplete(newReportData);
      }
    } catch (err) {
      console.error('Error generating medical report:', err);
      setError('Failed to generate medical report. Please try again later.');
      setStatus('error');
    }
  };

  const handleDownloadReport = () => {
    if (!reportData) return;
    
    // Create report content
    const reportContent = `
      MEDICAL SYMPTOM ANALYSIS REPORT
      ==============================
      Report ID: ${reportData.reportId}
      Date: ${reportData.createdAt.toLocaleString()}
      
      REPORTED SYMPTOMS:
      ${reportData.symptoms.join(', ')}
      
      POSSIBLE CONDITIONS:
      ${reportData.possibleConditions.join('\n')}
      
      URGENCY LEVEL:
      ${reportData.urgencyLevel.toUpperCase()}
      
      ADDITIONAL SYMPTOMS TO WATCH FOR:
      ${reportData.additionalSymptomsToWatch.join('\n')}
      
      RECOMMENDED SPECIALTIES:
      ${reportData.recommendedSpecialties.join('\n')}
      
      DISCLAIMER:
      This report is generated by an AI system and is not a medical diagnosis.
      Please consult a healthcare professional for proper medical advice.
    `;
    
    // Create downloadable blob
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    // Create download link
    const link = document.createElement('a');
    link.href = url;
    link.download = `medical_report_${reportData.reportId}.txt`;
    document.body.appendChild(link);
    link.click();
    
    // Cleanup
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handlePrint = () => {
    window.print();
  };

  const getUrgencyColor = (level: UrgencyLevel) => {
    switch (level) {
      case 'urgent':
        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-900';
      case 'moderate':
        return 'bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-950 dark:text-amber-300 dark:border-amber-900';
      case 'non-urgent':
      default:
        return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-900';
    }
  };

  const getUrgencyIcon = (level: UrgencyLevel) => {
    switch (level) {
      case 'urgent':
        return <AlertTriangle className="h-5 w-5 text-red-600 dark:text-red-400" />;
      case 'moderate':
        return <AlertCircle className="h-5 w-5 text-amber-600 dark:text-amber-400" />;
      case 'non-urgent':
      default:
        return <CheckCircle2 className="h-5 w-5 text-green-600 dark:text-green-400" />;
    }
  };

  const getUrgencyMessage = (level: UrgencyLevel) => {
    switch (level) {
      case 'urgent':
        return 'Seek immediate medical attention. These symptoms suggest an urgent condition that requires prompt evaluation.';
      case 'moderate':
        return 'Schedule a medical consultation soon. These symptoms should be evaluated, but are not immediately life-threatening.';
      case 'non-urgent':
      default:
        return 'Consider scheduling a routine appointment. These symptoms are typically manageable and may resolve on their own.';
    }
  };

  return (
    <div className={`w-full ${className}`}>
      {status === 'idle' || status === 'error' ? (
        <Card className="border border-blue-100 dark:border-blue-900/30 shadow-lg bg-white dark:bg-slate-950">
          <CardHeader className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-t-lg">
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Medical Report Generator
            </CardTitle>
            <p className="text-sm text-blue-100">Enter your symptoms to generate an AI-powered medical report</p>
          </CardHeader>
          <CardContent className="p-5 space-y-4">
            {error && (
              <div className="p-3 bg-red-50 border border-red-200 text-red-800 rounded-lg dark:bg-red-950/50 dark:text-red-300 dark:border-red-900/50 flex items-center gap-2 text-sm">
                <AlertCircle className="h-4 w-4 flex-shrink-0" />
                <p>{error}</p>
              </div>
            )}
            
            <div className="space-y-2">
              <label htmlFor="symptoms" className="text-sm font-medium">
                Enter your symptoms (separated by commas)
              </label>
              <textarea
                id="symptoms"
                className="w-full p-3 border border-blue-200 dark:border-blue-900/30 rounded-lg min-h-[100px] focus:border-blue-500 focus:ring-1 focus:ring-blue-500 outline-none bg-white dark:bg-slate-900"
                placeholder="e.g., headache, fever, fatigue, shortness of breath"
                value={inputSymptoms}
                onChange={(e) => setInputSymptoms(e.target.value)}
              />
            </div>
            
            <div className="bg-blue-50 dark:bg-blue-950/30 p-3 rounded-lg text-sm text-blue-800 dark:text-blue-300 border border-blue-100 dark:border-blue-900/30">
              <p className="flex items-center gap-1.5 mb-1.5 font-medium">
                <AlertCircle className="h-4 w-4" />
                For best results:
              </p>
              <ul className="list-disc pl-5 space-y-1">
                <li>Be specific about your symptoms</li>
                <li>Include duration (e.g., "3 days of fever")</li>
                <li>Note severity (e.g., "severe headache")</li>
                <li>Include relevant medical history if applicable</li>
              </ul>
            </div>
          </CardContent>
          <CardFooter className="px-5 py-3 bg-slate-50 dark:bg-slate-900 border-t border-blue-100 dark:border-blue-900/30 rounded-b-lg">
            <Button 
              onClick={handleAnalyze} 
              className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white w-full py-6 font-medium"
              disabled={!inputSymptoms.trim() || status === 'analyzing'}
            >
              {status === 'analyzing' ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing Symptoms...
                </>
              ) : (
                <>
                  Generate Medical Report
                  <ArrowRight className="h-4 w-4 ml-2" />
                </>
              )}
            </Button>
          </CardFooter>
        </Card>
      ) : status === 'analyzing' ? (
        <Card className="border border-blue-100 dark:border-blue-900/30 shadow-lg bg-white dark:bg-slate-950">
          <CardContent className="p-8 flex flex-col items-center justify-center">
            <div className="relative mb-6">
              <div className="w-20 h-20 rounded-full border-4 border-blue-100 dark:border-blue-900/30 border-t-blue-500 animate-spin"></div>
              <Stethoscope className="h-8 w-8 text-blue-600 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
            </div>
            <h3 className="text-lg font-medium mb-2 text-center">Analyzing Your Symptoms</h3>
            <p className="text-sm text-center text-slate-500 dark:text-slate-400 max-w-md">
              Our AI is thoroughly analyzing your symptoms to generate a detailed medical report.
              This may take a moment...
            </p>
          </CardContent>
        </Card>
      ) : (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Card className="border border-blue-100 dark:border-blue-900/30 shadow-lg bg-white dark:bg-slate-950 overflow-hidden print:shadow-none" id="medical-report">
            <CardHeader className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-t-lg flex flex-row items-center justify-between space-y-0 gap-4 print:from-blue-700 print:to-blue-700">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Medical Symptom Analysis Report
                </CardTitle>
                <p className="text-sm text-blue-100">
                  Generated on {reportData?.createdAt.toLocaleDateString()} at {reportData?.createdAt.toLocaleTimeString()}
                </p>
              </div>
              <div className="print:hidden flex items-center gap-2">
                {reportData?.emergencyDetected && (
                  <Button
                    size="sm"
                    className="bg-red-600 hover:bg-red-700 text-white"
                    onClick={() => window.open('tel:911')}
                  >
                    <AlertTriangle className="h-4 w-4 mr-1" />
                    Get Immediate Help
                  </Button>
                )}
                <Button
                  variant="outline"
                  size="sm"
                  className="bg-white/10 hover:bg-white/20 text-white border-white/30"
                  onClick={handleDownloadReport}
                >
                  <Download className="h-4 w-4 mr-1" />
                  Download
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="bg-white/10 hover:bg-white/20 text-white border-white/30"
                  onClick={handlePrint}
                >
                  <Printer className="h-4 w-4 mr-1" />
                  Print
                </Button>
              </div>
            </CardHeader>
            
            <CardContent className="p-0">
              <div className="p-4 bg-blue-50 dark:bg-blue-950/30 border-b border-blue-100 dark:border-blue-900/30 flex flex-col md:flex-row md:items-center justify-between gap-3">
                <div className="flex items-center gap-2">
                  <Badge variant="outline" className="bg-blue-100 dark:bg-blue-900/50 border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-300 px-2.5 py-1">
                    Report ID: {reportData?.reportId}
                  </Badge>
                </div>
                
                <div className="flex items-center">
                  <div className={`px-3 py-1.5 rounded-full border flex items-center gap-2 text-sm font-medium ${getUrgencyColor(reportData?.urgencyLevel || 'non-urgent')}`}>
                    {getUrgencyIcon(reportData?.urgencyLevel || 'non-urgent')}
                    <span className="capitalize">
                      {reportData?.urgencyLevel || 'Non-urgent'} Care Recommended
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="p-5 space-y-5">
                {/* Symptoms Section */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('symptoms')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">1</span>
                      </div>
                      Reported Symptoms
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.symptoms ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.symptoms && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      <div className="flex flex-wrap gap-2">
                        {reportData?.symptoms.map((symptom, index) => (
                          <Badge 
                            key={index} 
                            variant="outline"
                            className="bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-300 border-slate-200 dark:border-slate-700 py-1.5 px-3"
                          >
                            {symptom}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Possible Conditions Section */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('conditions')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">2</span>
                      </div>
                      Possible Conditions
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.conditions ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.conditions && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      {reportData?.possibleConditions && reportData.possibleConditions.length > 0 ? (
                        <ul className="space-y-2">
                          {reportData.possibleConditions.map((condition, index) => (
                            <li key={index} className="flex items-center gap-2 text-slate-700 dark:text-slate-300">
                              <Pill className="h-4 w-4 text-blue-500 flex-shrink-0" />
                              {condition}
                            </li>
                          ))}
                        </ul>
                      ) : (
                        <p className="text-slate-500 dark:text-slate-400 italic">
                          No specific conditions identified. Please consult with a healthcare professional for proper diagnosis.
                        </p>
                      )}
                      
                      <div className="mt-4 pt-4 border-t border-slate-100 dark:border-slate-800">
                        <p className="text-sm text-slate-500 dark:text-slate-400">
                          <strong>Note:</strong> This information is for reference only and should not be considered a diagnosis.
                        </p>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Recommended Specialists Section */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('specialists')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">3</span>
                      </div>
                      Recommended Specialists
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.specialists ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.specialists && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      <div className="space-y-3">
                        {reportData?.recommendedSpecialties && reportData.recommendedSpecialties.length > 0 ? (
                          reportData.recommendedSpecialties.map((specialty, index) => (
                            <div 
                              key={index} 
                              className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-100 dark:border-blue-900/30"
                            >
                              <div className="flex items-center justify-center h-8 w-8 rounded-full bg-blue-100 dark:bg-blue-900/50">
                                <Stethoscope className="h-4 w-4 text-blue-700 dark:text-blue-300" />
                              </div>
                              <div>
                                <h4 className="font-medium text-blue-800 dark:text-blue-300">{specialty}</h4>
                              </div>
                            </div>
                          ))
                        ) : (
                          <p className="text-slate-500 dark:text-slate-400 italic">
                            No specific specialists recommended. Consider consulting with a General Physician.
                          </p>
                        )}
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Urgency Assessment */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('urgency')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">4</span>
                      </div>
                      Urgency Assessment
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.urgency ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.urgency && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      <div className={`p-4 rounded-lg border ${getUrgencyColor(reportData?.urgencyLevel || 'non-urgent')}`}>
                        <div className="flex items-center gap-3 mb-2">
                          {getUrgencyIcon(reportData?.urgencyLevel || 'non-urgent')}
                          <h4 className="font-medium capitalize">{reportData?.urgencyLevel || 'Non-urgent'} Care</h4>
                        </div>
                        <p className="text-sm">
                          {getUrgencyMessage(reportData?.urgencyLevel || 'non-urgent')}
                        </p>
                      </div>
                      
                      {reportData?.emergencyDetected && reportData?.emergencyRecommendation && (
                        <div className="mt-4 p-3 bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-900/50 rounded-lg text-red-800 dark:text-red-300 text-sm">
                          <div className="flex items-start gap-2">
                            <AlertTriangle className="h-5 w-5 text-red-600 dark:text-red-400 mt-0.5" />
                            <div>
                              <p className="font-medium">⚠️ Emergency Warning</p>
                              <p>{reportData.emergencyRecommendation}</p>
                              <div className="mt-3">
                                <Button 
                                  className="bg-red-600 hover:bg-red-700 text-white"
                                  onClick={() => window.open('tel:911')}
                                >
                                  <AlertTriangle className="h-4 w-4 mr-2" />
                                  Get Immediate Help
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
                
                {/* Treatment Suggestions Section */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('treatment')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">5</span>
                      </div>
                      Treatment Suggestions
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.treatment ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.treatment && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      {reportData?.treatmentSuggestions && reportData.treatmentSuggestions.length > 0 ? (
                        <div className="space-y-2">
                          {reportData.treatmentSuggestions.map((treatment, index) => (
                            <div key={index} className="flex items-center gap-2">
                              <div className="flex-shrink-0 w-5 h-5 rounded-full bg-green-100 dark:bg-green-900/40 flex items-center justify-center">
                                <CheckCircle2 className="h-3.5 w-3.5 text-green-600 dark:text-green-400" />
                              </div>
                              <span className="text-slate-700 dark:text-slate-300">{treatment}</span>
                            </div>
                          ))}
                          
                          <div className="mt-3 pt-3 border-t border-slate-100 dark:border-slate-800">
                            <p className="text-sm text-slate-500 dark:text-slate-400">
                              These suggestions are for informational purposes only. Always follow your healthcare provider's advice.
                            </p>
                          </div>
                        </div>
                      ) : (
                        <p className="text-slate-500 dark:text-slate-400 italic">
                          No specific treatment suggestions available. Please consult with a healthcare professional.
                        </p>
                      )}
                    </div>
                  )}
                </div>
                
                {/* Prevention Tips Section */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('prevention')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">6</span>
                      </div>
                      Prevention Tips
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.prevention ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.prevention && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      {reportData?.preventionTips && reportData.preventionTips.length > 0 ? (
                        <div className="space-y-2">
                          {reportData.preventionTips.map((tip, index) => (
                            <div key={index} className="flex items-center gap-2">
                              <div className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100 dark:bg-blue-900/40 flex items-center justify-center">
                                <CheckCircle2 className="h-3.5 w-3.5 text-blue-600 dark:text-blue-400" />
                              </div>
                              <span className="text-slate-700 dark:text-slate-300">{tip}</span>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="text-slate-500 dark:text-slate-400 italic">
                          No specific prevention tips available.
                        </p>
                      )}
                    </div>
                  )}
                </div>
                
                {/* Watch For These Symptoms */}
                <div className="border border-slate-200 dark:border-slate-800 rounded-lg overflow-hidden">
                  <div 
                    className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 cursor-pointer"
                    onClick={() => toggleSection('watchFor')}
                  >
                    <h3 className="font-medium flex items-center gap-2">
                      <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/50">
                        <span className="text-blue-700 dark:text-blue-300 text-sm font-semibold">7</span>
                      </div>
                      Additional Symptoms to Watch For
                    </h3>
                    <ChevronDown className={`h-5 w-5 text-slate-400 transition-transform ${expandedSections.watchFor ? 'rotate-180' : ''}`} />
                  </div>
                  
                  {expandedSections.watchFor && (
                    <div className="p-4 border-t border-slate-200 dark:border-slate-800">
                      {reportData?.additionalSymptomsToWatch && reportData.additionalSymptomsToWatch.length > 0 ? (
                        <div className="space-y-2">
                          {reportData.additionalSymptomsToWatch.map((symptom, index) => (
                            <div key={index} className="flex items-center gap-2">
                              <AlertCircle className="h-4 w-4 text-amber-500 flex-shrink-0" />
                              <span className="text-slate-700 dark:text-slate-300">{symptom}</span>
                            </div>
                          ))}
                          
                          <div className="mt-3 pt-3 border-t border-slate-100 dark:border-slate-800">
                            <p className="text-sm text-slate-500 dark:text-slate-400">
                              If you develop any of these additional symptoms, please seek medical attention promptly.
                            </p>
                          </div>
                        </div>
                      ) : (
                        <p className="text-slate-500 dark:text-slate-400 italic">
                          No specific additional symptoms identified to watch for.
                        </p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
            
            <CardFooter className="px-5 py-4 bg-slate-50 dark:bg-slate-900 border-t border-blue-100 dark:border-blue-900/30 flex justify-between items-center">
              <div className="text-sm text-slate-500 dark:text-slate-400 max-w-lg">
                <p className="font-semibold text-slate-700 dark:text-slate-300 mb-1">Medical Disclaimer</p>
                <p>This report is generated using artificial intelligence and is not a substitute for professional medical advice, diagnosis, or treatment.</p>
              </div>
              
              <div className="print:hidden">
                <Button
                  variant="outline"
                  className="bg-white hover:bg-slate-50 dark:bg-slate-800 dark:hover:bg-slate-700 border-slate-200 dark:border-slate-700"
                  onClick={() => {
                    setStatus('idle');
                    setReportData(null);
                    setInputSymptoms('');
                  }}
                >
                  New Report
                </Button>
              </div>
            </CardFooter>
          </Card>
        </motion.div>
      )}
    </div>
  );
};

export default MedicalReportGenerator; 